import axios from 'axios';
import PropertyDetails from '../models/propertyDetails.model.js'; // Ajusta la ruta si es necesario

export const syncWithTokkoid = async () => {
  // Lista de IDs que obtuviste de tu endpoint /api/properties/ids
  const propertyIds = [
    61230,
    61384,
    226189,
    243939,
    298807,
    306450,
    359422,
    359424,
    359426,
    441591,
    575626,
    627711,
    631881,
    638334,
    742118,
    742159,
    751170,
    1093775,
    1122840,
    1527604,
    1531867,
    1567047,
    1977625,
    1985221,
    2113216,
    2121421,
    2176599,
    2176802,
    2176803,
    2176804,
    2189954,
    2211639,
    2236344,
    2286861,
    2352056,
    2505394,
    2563821,
    2647091,
    2780070,
    2965735,
    3048615,
    3269386,
    3310452,
    3327733,
    3417921,
    3419816,
    3446172,
    3465403,
    3471325,
    3504654,
    3505541,
    3521612,
    3532901,
    3534813,
    3587127,
    3632402,
    3652262,
    3865574,
    3886942,
    3889369,
    3889373,
    3925549,
    3985362,
    3997464,
    4016687,
    4046046,
    4048969,
    4048979,
    4090121,
    4102858,
    4106823,
    4136021,
    4196347,
    4260629,
    4272544,
    4278897,
    4289017,
    4294349,
    4327202,
    4332997,
    4611995,
    4665586,
    4726817,
    4728120,
    4728264,
    4745616,
    4746432,
    4746653,
    4747490,
    4754641,
    4790578,
    4798270,
    4869548,
    4880603,
    4895047,
    4900187,
    4900283,
    4900304,
    4902605,
    4923338,
    4933426,
    4934435,
    4934711,
    4935345,
    4935384,
    4974049,
    4979260,
    4987846,
    5003250,
    5005542,
    5007911,
    5007912,
    5008826,
    5008827,
    5009031,
    5009032,
    5009033,
    5009738,
    5009739,
    5009740,
    5009902,
    5023828,
    5030023,
    5042990,
    5059670,
    5111726,
    5115575,
    5190517,
    5195358,
    5246113,
    5264064,
    5266049,
    5266202,
    5268462,
    5315434,
    5315820,
    5355889,
    5368747,
    5387514,
    5388637,
    5480476,
    5509761,
    5535708,
    5543347,
    5582832,
    5599320,
    5615138,
    5641285,
    5648625,
    5723403,
    5732473,
    5732499,
    5732501,
    5732505,
    5742947,
    5748735,
    5778968,
    5779610,
    5784183,
    5796977,
    5803194,
    5803344,
    5810630,
    5815594,
    5815595,
    5815596,
    5815598,
    5815634,
    5815635,
    5815640,
    5815641,
    5815646,
    5815647,
    5815652,
    5822603,
    5833357,
    5852019,
    5862325,
    5865924,
    5869299,
    5886969,
    5887559,
    5898324,
    5898591,
    5923683,
    5932288,
    5935123,
    5969615,
    5969703,
    5969825,
    5969867,
    5969868,
    5969869,
    5969870,
    5969871,
    5969926,
    5970034,
    5970058,
    5970063,
    5970101,
    5970102,
    5970106,
    5979889,
    5994913,
    5997444,
    6001374,
    6001533,
    6004333,
    6010707,
    6015231,
    6015277,
    6017297,
    6017300,
    6017419,
    6032039,
    6048106,
    6068564,
    6072134,
    6081298,
    6094463,
    6101138,
    6104742,
    6108318,
    6118409,
    6121954,
    6123487,
    6124803,
    6126471,
    6129859,
    6133504,
    6139029,
    6141994,
    6142938,
    6150248,
    6162374,
    6165545,
    6174857,
    6183586,
    6187612,
    6191331,
    6207286,
    6208524,
    6211679,
    6215013,
    6217620,
    6226553,
    6236350,
    6236555,
    6240015,
    6241553,
    6252184,
    6257643,
    6280470,
    6282672,
    6287406,
    6288686,
    6294945,
    6295687,
    6297583,
    6306215,
    6313170,
    6319000,
    6327567,
    6328178,
    6328696,
    6331375,
    6334688,
    6346240,
    6349742,
    6353279,
    6353421,
    6355315,
    6355330,
    6365073,
    6368209,
    6368242,
    6372294,
    6378776,
    6382872,
    6389739,
    6389919,
    6389921,
    6389922,
    6389924,
    6389925,
    6389930,
    6389933,
    6389935,
    6389937,
    6389938,
    6389939,
    6389940,
    6389943,
    6389946,
    6389947,
    6389950,
    6389952,
    6389956,
    6389958,
    6389975,
    6389977,
    6389737
]

try {
  console.log('Iniciando sincronización con Tokko...');

  for (const id of propertyIds) {
    try {
      console.log(`Obteniendo detalles de la propiedad con ID: ${id}`);

      // Hacer la solicitud a la API de Tokko
      const response = await axios.get(`https://www.tokkobroker.com/api/v1/property/${id}/`, {
        params: {
          key: process.env.TOKKO_TOKEN,
          limit: 1,
          offset: 0,
        },
      });

      const propertyDetails = response.data;

      // Guardar o actualizar en la base de datos
      await PropertyDetails.updateOne(
        { id: propertyDetails.id },
        { $set: propertyDetails },
        { upsert: true } // Inserta si no existe
      );

      console.log(`Propiedad sincronizada con ID: ${id}`);
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.warn(`Propiedad con ID ${id} no encontrada (404), ignorando...`);
      } else {
        console.error(`Error al sincronizar la propiedad con ID ${id}:`, error.message);
      }
    }

    // Espera 4 segundos antes de continuar con la siguiente solicitud
    await new Promise(resolve => setTimeout(resolve, 4000));
  }

  console.log('Sincronización completada.');
} catch (error) {
  console.error('Error al sincronizar con Tokko:', error.message);
}
};
